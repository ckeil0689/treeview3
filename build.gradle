plugins {
  //For building .app/.dmg Mac packages/apps - WORKS
  id "edu.sc.seis.macAppBundle" version "2.3.0"

  //For building shell-script/.deb Debian packages/scripts
  id "nebula.ospackage" version "6.1.1"

  //For building windows exes/msis
  id 'de.inetsoftware.setupbuilder' version "4.8.5"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: "nebula.ospackage"
apply plugin: 'de.inetsoftware.setupbuilder'

defaultTasks "clean", "fatJar", "eclipse"

version = getVersionName()
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.miglayout:miglayout-swing:5.0'
  compile 'com.googlecode.plist:dd-plist:1.3'
  compile 'org.freehep:freehep-graphicsio:2.4'
  compile 'org.freehep:freehep-graphicsio-pdf:2.4'
  compile 'org.freehep:freehep-graphicsio-ps:2.4'
  compile 'org.freehep:freehep-graphicsio-svg:2.4'
  compile 'org.freehep:freehep-graphics2d:2.4'
  compile 'org.swinglabs.swingx:swingx-autocomplete:1.6.5-1'
  compile 'commons-io:commons-io:2.5'
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java/'

      // Deprecated files excluded from build path - check if removal makes sense!
      exclude '**/edu/stanford/genetics/treeview/reg/**'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/GTRZoomView.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/ZoomView.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/ColorBarExportPanel.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/PostscriptColorBarExportPanel.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/GifColorBarExportPanel.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/BitmapColorBarExportPanel.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/FontSettingsPanel.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/InvertedTreeDrawer.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/KnnDendrogramFactory.java'
      exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/TextViewManager.java'
      exclude '**/edu/stanford/genetics/treeview/LoadProgress2.java'
      exclude '**/edu/stanford/genetics/treeview/CustomConfigs.java'
      exclude '**/edu/stanford/genetics/treeview/MenuPanel.java'
    }
  }
}

def copyMacPkgFiles() {
  copy {
    from file("${projectDir}/")
    into file("${buildDir}/macApp")
    include 'README.md'
    rename('README.md','README.txt')
  }
  mkdir file("${buildDir}/macApp/Sample")
  copy {
    from file("${projectDir}/src/main/resources")
    into file("${buildDir}/macApp/Sample")
    include 'spellman.cdt'
  }
}

task fatJar(type: Jar) {
  doLast {
    manifest {
      attributes 'Main-Class': 'edu.stanford.genetics.treeview.app.TreeView3'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
  }
}

/*
 * Gets the version name from the latest Git tag
 * Thank you @ http://ryanharter.com/blog/2013/07/30/automatic-versioning-with-git-and-gradle/
 */
def getVersionName() {
  def stdout = new ByteArrayOutputStream()
  exec {
    // might be useful for later version management
    // commandLine 'git', 'describe', '--tags'
    commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

// Mac App Builder stuff - Use createDmg/createApp
macAppBundle {
  mainClassName = "edu.stanford.genetics.treeview.app.TreeView3"
  icon = "src/main/resources/TreeView3.icns"
  appName = "TreeView3"
  bundleJRE = false
  javaExtras.put("-Xmx4g", null)   //If value of key/value pair is null, it just
  //adds the flag as-is without adding '='

  //Put the readme & sample file(s) in the dmg
  copyMacPkgFiles()

  //The following does not work because macAppBundle follows symlinks when it creates the dmg
  //exec {
  //  commandLine 'ln', '-s', '/Applications', "${buildDir}/macApp/Applications"
  //  standardOutput = new ByteArrayOutputStream()
  //}
  //We do not want a background image, but defining one causes a /Applications
  //alias to get automatically created, so I created a single transparent pixel
  //background png image
  backgroundImage = "src/main/resources/dmg_bkgd.png"
  //codeSign certificate information:
  //Princeton "Developer ID Application" Certificate ID string:
  certIdentity = "Y3TW367T4G"
}

createDmg.dependsOn(codeSign)

//Deb builder stuff (creates shell script & puts in /usr/local) - Use buildDeb
ospackage {
  packageName = 'treeview3'
  version = '1beta'
  release = getVersionName()
  arch = ''
  os = LINUX

  into '/usr/local/treeview3'

  from ( 'build/install/treeview3/lib' ) {
    include '*.jar'
    into "lib"
  }
  from ( 'build/scripts' ) {
    include 'treeview3'
    fileMode 0555
    into "bin"
  }
  from ( 'scripts/lnx' ) {
    include 'treeview3.desktop'
    into "desktop"
  }
  from ( 'src/main/resources' ) {
    include 'logo.png'
    into "desktop"
  }
  from ( "." ) {
    include 'README.md'
    into "docs"
  }
  from ( 'src/main/resources' ) {
    include 'spellman.cdt'
    into "docs/Sample"
  }
}

buildRpm {
  link('/usr/local/bin/treeview3', '/usr/local/treeview3/bin/treeview3')
  String libname = 'treeview3-' + getVersionName() + '.jar'
  link('/usr/local/lib/' + libname, '/usr/local/treeview3/lib/' + libname)
  link('/usr/share/applications/treeview3.desktop', '/usr/local/treeview3/desktop/treeview3.desktop')
}

buildDeb {
  link('/usr/local/bin/treeview3', '/usr/local/treeview3/bin/treeview3')
  String libname = 'treeview3-' + getVersionName() + '.jar'
  link('/usr/local/lib/' + libname, '/usr/local/treeview3/lib/' + libname)
  link('/usr/share/applications/treeview3.desktop', '/usr/local/treeview3/desktop/treeview3.desktop')
}


//This code is required in order to have a shell script created for the .deb package installer
//The following is based on:
//https://blog.heckel.xyz/2014/05/29/gradle-create-windows-installers-debian-packages-manage-a-ppa-and-optional-sub-projects/#Building-Debian-Ubuntu-packages-and-uploading-to-a-PPA

mainClassName = "edu.stanford.genetics.treeview.app.TreeView3"

String applicationVersionFull = getVersionName()

task debianClean(type: Delete) {
  delete 'build/debian'
}

tasks.addRule("Pattern: debianPrepare<distribution>") { String taskName ->
  if (taskName.startsWith("debianPrepare")) {
    task(taskName, dependsOn: [installDist, debianClean]){
      String debianDistribution = (taskName - "debianPrepare").toLowerCase()
      //String debianPpaVersion = getVersionName()
      String debianApplicationVersionFull = getVersionName()

      doLast {
        copy {
          from rootProject.files("build/install/treeview3") 
          into rootProject.file("build/debian/treeview3")
          exclude '**/edu/stanford/genetics/treeview/reg/**'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/GTRZoomView.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/ZoomView.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/ColorBarExportPanel.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/PostscriptColorBarExportPanel.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/GifColorBarExportPanel.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/BitmapColorBarExportPanel.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/FontSettingsPanel.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/InvertedTreeDrawer.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/KnnDendrogramFactory.java'
          exclude '**/edu/stanford/genetics/treeview/plugin/dendroview/TextViewManager.java'
          exclude '**/edu/stanford/genetics/treeview/LoadProgress2.java'
          exclude '**/edu/stanford/genetics/treeview/CustomConfigs.java'
          exclude '**/edu/stanford/genetics/treeview/MenuPanel.java'
        }
 
        copy {
          from rootProject.files("gradle/debian/debian") 
          into rootProject.file("build/debian/treeview3/debian")
        }
      }
    }
  }
}

buildDeb.dependsOn debianPreparetreeview3
buildRpm.dependsOn debianPreparetreeview3


//SetupBuilder attempt...
setupBuilder {
  vendor = 'Princeton University Bioinformatics Group'
  application = "TreeView3"
  appIdentifier = "treeview3"
  description = "Clustering heatmap browser"
  version = '1.0'
  icons = 'src/main/resources/TreeView3.icns'
  licenseFile = 'LICENSES/LICENSE'
  from fatJar.outputs
  mainClass = 'edu.stanford.genetics.treeview.app.TreeView3'
  mainJar = 'TreeView3.jar'
}

msi {
  String contents = new File( 'scripts/win/TreeView3.template' ).getText( 'UTF-8' )
  contents = contents.replaceAll( 'HASHSTR', getVersionName() )
  new File( 'scripts/win/final/TreeView3.bat' ).write( contents, 'UTF-8' )
  from( 'scripts/win/final' ) {
    include '*'
    fileMode 0755
  }
  from ( "." ) {
    include 'README.md'
  }
  from ( 'src/main/resources' ) {
    include 'spellman.cdt'
    into "Sample"
  }
  def jarfile = 'treeview3' + '-all-' + getVersionName() + '.jar'
  setupBuilder.desktopStarter {
    displayName = 'TreeView3'
    executable = 'TreeView3.vbs'
  }
}

msi.dependsOn fatJar
